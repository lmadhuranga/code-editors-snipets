{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
		// 	"prefix": "log",
		// 	"body": [
			// 		"console.log('$1');",
			// 		"$2"
			// 	],
			// 	"description": "Log output to console"
			// }
			
			"sslocalnic": {
				"prefix": "sslocalnic",
				"body": [
					"this.localData.get('userData','nic');"
				],
				"description": "userData nic"
			},
			"sslocalData init": {
				"prefix": "sslocalinit",
				"body": [
					"private localData: ${1:LocalstorageService},"
				],
				"description": "Local storage service"
			},
			
			"": {
				"prefix": "ssfuntion",
				"body": [
					"const ${1:funName} = ($2) => {$3}"
				],
				"description": "Funciton for es6"
			},
			
			"Section End comment": {
				"prefix": "ssSection",
				"body": [
					"//  ${1:fname} ++++++++++++++++++++++++++++++++++++++++++++ ${1:fname} ++++++++++++++++++++++++++++++++++++++++++++",
					"$2",
					"//  ${1:fname} ............................................. ${1:fname} ............................................."
				],
				"description": "Section End comment"
			},
			
			"Print to console": {
				"prefix": "clog",
				"body": [
					"console.log(`msg_$1`${2:,$1});"
				],
				"description": "Log output to console"
			},
			
			
			"jqeyr event": {
				"prefix": "ssthi",
				"body": [
					"$(this).${1:click}(function() {",
					"$2console.log('msg_event_triggered ${1:click}');",
					"});"
				],
				"description": "jqeyr event"
			},
			
			"document query": {
				"prefix": "ssquerySelect",
				"body": [
					"document.querySelector(`$1`)"
				],
				"description": "Log output to console"
			},
			
			"jQUwey redy": {
				"prefix": "ready",
				"body": [
					"$( document ).ready(function() {",
				  "$1",
					"});"
				],
				"description": "Log output to console"
			},
			
			"Event Prevent default": {
				"prefix": "sseventPrevent",
				"body": [
					"event.preventDefault();"
				],
				"description": "event prevent default"
			},
			
			"Set Satate": {
				"prefix": "sssetstate",
				"body": [
					"this.state({$1});"
				],
				"description": "Set Satate"
			},
			
			"White space": {
				"prefix": "ssspage",
				"body": [
					"&nbsp; $1"
				],
				"description": "added &nbsp;"
			},
		
			"Import Service": {
				"prefix": "ssimpService",
				"body": [
					"import $2 from '../../services$1';",
					"$3"
				],
				"description": "Import Service"
			},
		
			"Import component": {
				"prefix": "ssimpComponent",
				"body": [
					"import $2 from './components/$1';",
					"$3"
				],
				"description": "Import Component"
			},
		
			"Import componentconfig": {
				"prefix": "ssConfig",
				"body": [
					"import { ${2: appConfig } } from '../${1:../}config/globel.conf'",
					"$3"
				],
				"description": "Import Config"
			},
		
			"Import axios": {
				"prefix": "simport",
				"body": [
					"import ${1:axios} from '$1';"
				],
				"description": "Import plusin"
			},

			"Import helper utils": {
				"prefix": "simport",
				"body": [
					"import ${1:utils} from '../helpers/$1';"
				],
				"description": "Import utils"
			},

			"const vars": {
				"prefix": "ssconst",
				"body": [
					"const { ${1:data} }  = ${2:this.state}"
				],
				"description": "const vars"
			},
		 
			"Function": {
				"prefix": "sfun",
				"body": [
					"$1($2){$3}"
				],
				"description": "Function"
			},
		
			
			"Todo": {
				"prefix": "ssTodo",
				"body": [
					"// Todo:: $1"
				],
				"description": "Function"
			},
		
		
			"Reffer": {
				"prefix": "ssref",
				"body": [
					"// $2", 
					"// RrefUrl:: $1"
				],
				"description": "Function"
			}, 		
			
			"It": {
				"prefix": "sit",
				"body": [
					"it('should ${1:reason}', () => {",
						"$2",
					"});"
				],
				"description": "Function"
			},
			
			"Expect": {
				"prefix": "sexpect",
				"body": [
					"expect($1).${2:toHaveBeenCalledTimes}($3);",
					"$4"
				],
				"description": "Test Expect"
			},

		
			"${}": {
				"prefix": "ssvar",
				"body": [
					"`${$1}`",
				],
				"description": "${}"
			},

//  ReactJS================================================== ReactJS==================================================
"Print to console1": {
  "prefix": "ssconstruct",
  "body": [ 
    "constructor(props) {",
    " super(props);",
    " this.state = {",
    "   name:'',",
    "   errors: {",
    "     name:'', ",
    "   }",
    " };",
    "//this.fun1 = this.fun1.bind(this);",
   "}"
  ],
  "description": "Log output to console"
},
//  ReactJS-End================================================== ReactJS-End==================================================
		
//  Nodejs================================================== Nodejs==================================================
			"nget": {
				"prefix": "nget",
				"body": [
					"app.${1:get}('/${2:hostUrl}', (req, res) => {",
						"res.json({msg: ${3:'Hello World'}})",
					"})",
				],
				"description": "Nod js get foramt"
			},
			
			//  node js 
			"Nodejs Init": {
				"prefix": "nginit",
				"body": [
					"const express = require('express');",
					"const bodyParser = require('body-parser');",
					"const path = require('path');",
					"",
					"const app = express();",
					"",
					"app.use(express.static(\"public\"));",
					"",
					"app.use(bodyParser.json());",
					"",
					"app.get('/', (req, res)=>{ res.send('hello world') })",
				],
				"description": "Nod js initial structure"
			},

			"res.json({})": {
				"prefix": "resj",
				"body": [
					"res.json({$1});",
				],
				"description": "res.json({})"
			},

			"res.send({})": {
				"prefix": "resj",
				"body": [
					"res.send('$1');",
				],
				"description": "res.send()"
			},
//  Nodejs===================End=========================== Nodejs==================================================

}